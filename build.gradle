plugins {
    id 'base'
    id 'java'
    id 'maven-publish'
    id 'net.neoforged.moddev' version "2.0.10-beta"
    // https://maven.architectury.dev/me/shedaniel/unified-publishing/maven-metadata.xml
    id "me.shedaniel.unified-publishing" version "0.1.13"
}

ext.ENV = System.getenv()

def loader = "neoforge"
def Loader = "NeoForge"

version = project.mod_version
group = project.mod_group
base.archivesBaseName(project.archives_base_name)

neoForge {
    version = project.neoforge_version
    accessTransformers {
        publish(project.file('src/main/resources/META-INF/accesstransformer.cfg'))
    }

    interfaceInjectionData {
        from(file('interfaces.json'))
        publish(file('interfaces.json'))
    }

    runs {
        configureEach {
            logLevel = Level.INFO
        }

        client {
            client()

            if (ENV.MC_CLIENT_ARGS) {
                programArguments.addAll(ENV.MC_CLIENT_ARGS.split(' '))
            }

            jvmArguments.addAll("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
            gameDirectory = file 'run'
        }

        server {
            server()
            programArgument("--nogui")
            gameDirectory = file 'run_server'
        }
    }


    mods {
        kubejsadditions {
            sourceSet sourceSets.main
        }
    }

    parchment {
        minecraftVersion = parchment_mc_version
        mappingsVersion = parchment_mapping_version
    }
}

compileJava {
    options.encoding = "UTF-8"
    options.release.set(21)
}

java {
    sourceCompatibility = targetCompatibility = '21'
    withSourcesJar()
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url "https://maven.neoforged.net/releases"
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
        content {
            includeGroup "org.parchmentmc.data"
        }
    }

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        url "https://maven.architectury.dev/"
    }

    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
            includeGroup "net.darkhax.bookshelf"
            includeGroup "net.darkhax.gamestages"
        }
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
}

dependencies {
    api("dev.latvian.mods:kubejs-${loader}:${project.kubejs_version}")

    compileOnly("dev.architectury:architectury-neoforge:$architectury_version")
    compileOnly("mezz.jei:jei-1.21.1-neoforge:$jei_version")
//    compileOnly("me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version")
//    compileOnly("dev.emi:emi-neoforge:$emi_version:api")
}

processResources {
    outputs.upToDateWhen { false }

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand project.properties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = archives_base_name
            from components.java
        }
    }

//    repositories {}
}

unifiedPublishing {
    project {
        // releaseType = project.upload_type
        //        gameVersions = [
        //                project.minecraft_version
        //        ]
        //        gameLoaders = ["${loader}"]
        //        displayName = "$mod_name ${Loader} $project.version"
        releaseType = project.upload_type
        gameVersions = Arrays.asList(rootProject.supported_versions.split(', '))
        gameLoaders = ["${loader}"]
        displayName = "$mod_name ${Loader} $project.version"
        mainPublication jar

        relations {
            depends {
                curseforge = modrinth = "kubejs"
            }
        }

        if (ENV.CURSEFORGE_KEY) {
            curseforge {
                token = ENV.CURSEFORGE_KEY
                id = project.curseforge_id
            }
        }

        if (ENV.MODRINTH_TOKEN) {
            modrinth {
                token = ENV.MODRINTH_TOKEN
                id = project.modrinth_id
                version = "${mod_id}-${loader}-${mod_version}"
            }
        }
    }
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "1000"
    }
}