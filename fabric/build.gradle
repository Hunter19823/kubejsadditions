plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'me.shedaniel.unified-publishing'
}

def loader = "fabric"
def Loader = "Fabric"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation("dev.latvian.mods:kubejs-fabric:${rootProject.kubejs_version}")


    modCompileOnly("mezz.jei:jei-${minecraft_version}:${rootProject.jei_version}:api")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}:${rootProject.jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project {
        releaseType = rootProject.artifact_type
        gameVersions = [
                rootProject.minecraft_version
        ]
        gameLoaders = ["${loader}"]
        displayName = "$mod_name ${Loader} $project.version"
        mainPublication remapJar

        relations {
            depends {
                curseforge = modrinth = "architectury-api"
            }
            depends {
                curseforge = modrinth = "kubejs"
            }
        }

        if (ENV.CURSEFORGE_KEY) {
            curseforge {
                token = ENV.CURSEFORGE_KEY
                id = project.curseforge_id
            }
        }

        if (ENV.MODRINTH_TOKEN) {
            modrinth {
                token = ENV.MODRINTH_TOKEN
                id = project.modrinth_id
                version = "${mod_id}-${loader}-${mod_version}"
            }
        }
    }
}