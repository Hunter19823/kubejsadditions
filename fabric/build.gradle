plugins {
    id 'me.shedaniel.unified-publishing'
}

def loader = "fabric"
def Loader = "Fabric"

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":common").file("src/main/resources/${mod_id}.accesswidener")

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    developmentFabric.extendsFrom common
    configureEach {
        resolutionStrategy {
            force "net.fabricmc:fabric-loader:${fabric_loader_version}"
        }
    }

    //common
    //shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    //compileClasspath.extendsFrom common
    //runtimeClasspath.extendsFrom common
}

loom {
    accessWidenerPath = accessWidenerFile
}

repositories {
    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "com.faux.ingredientextension"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // Loader Dependencies
    modApi "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}+${minecraft_version}"

    // KubeJS
    modImplementation("dev.latvian.mods:kubejs-${loader}:${kubejs_version}")

    // Arch
    modApi "dev.architectury:architectury-${loader}:${architectury_version}"

    // Jade
    modImplementation "curse.maven:${jade_project_id}:${jade_fabric_file_id}"

    // JEI Api
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-${loader}-api:${jei_version}")

    // Jei Impl
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-${loader}:${jei_version}")

    // Combine Common and Fabric
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    bundle(project(path: ":common", configuration: "transformProduction${Loader}")) { transitive false }

    // MixinExtras
    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-${loader}:${mixin_extras}")))
}

// The AccessWidener file is needed in :fabric project resources when the game is run.
tasks.register('copyAccessWidener', Copy) {
    from accessWidenerFile
    into generatedResources
}

sourceSets {
    main {
        // compiledBy copyAccessWidener // I think this broke things even more
        resources {
            // srcDir generatedResources
            srcDir copyAccessWidener
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        releaseType = project.upload_type
        gameVersions = [
                project.minecraft_version
        ]
        gameLoaders = ["${loader}"]
        displayName = "$mod_name ${Loader} $project.version"
        mainPublication remapJar

        relations {
            depends {
                curseforge = modrinth = "architectury-api"
            }
            depends {
                curseforge = modrinth = "kubejs"
            }
        }

        if (ENV.CURSEFORGE_KEY) {
            curseforge {
                token = ENV.CURSEFORGE_KEY
                id = project.curseforge_id
            }
        }

        if (ENV.MODRINTH_TOKEN) {
            modrinth {
                token = ENV.MODRINTH_TOKEN
                id = project.modrinth_id
                version = "${mod_id}-${loader}-${mod_version}"
            }
        }
    }
}